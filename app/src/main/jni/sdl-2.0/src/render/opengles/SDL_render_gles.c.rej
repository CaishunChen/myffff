--- src/render/opengles/SDL_render_gles.c	2013-10-08 17:46:42.398028793 +0200
+++ src/render/opengles/SDL_render_gles.c	2013-10-08 15:37:33.563284000 +0200
@@ -431,25 +430,47 @@
         format = GL_RGBA;
         type = GL_UNSIGNED_BYTE;
         break;
+    case SDL_PIXELFORMAT_RGB565:
+        internalFormat = GL_RGB;
+        format = GL_RGB;
+        type = GL_UNSIGNED_SHORT_5_6_5;
+        break;
+    case SDL_PIXELFORMAT_RGBA5551:
+        internalFormat = GL_RGBA;
+        format = GL_RGBA;
+        type = GL_UNSIGNED_SHORT_5_5_5_1;
+        break;
+    case SDL_PIXELFORMAT_RGBA4444:
+        internalFormat = GL_RGBA;
+        format = GL_RGBA;
+        type = GL_UNSIGNED_SHORT_4_4_4_4;
+        break;
+    case SDL_PIXELFORMAT_RGB24:
+        internalFormat = GL_RGB;
+        format = GL_RGB;
+        type = GL_UNSIGNED_BYTE;
+        break;
     default:
         SDL_SetError("Texture format not supported");
         return -1;
     }
 
-    data = (GLES_TextureData *) SDL_calloc(1, sizeof(*data));
-    if (!data) {
-        SDL_OutOfMemory();
-        return -1;
-    }
-
-    if (texture->access == SDL_TEXTUREACCESS_STREAMING) {
-        data->pitch = texture->w * SDL_BYTESPERPIXEL(texture->format);
-        data->pixels = SDL_calloc(1, texture->h * data->pitch);
-        if (!data->pixels) {
+    if(data == NULL) {
+        data = (GLES_TextureData *) SDL_calloc(1, sizeof(*data));
+        if (!data) {
             SDL_OutOfMemory();
-            SDL_free(data);
             return -1;
         }
+
+        if (texture->access == SDL_TEXTUREACCESS_STREAMING) {
+            data->pitch = texture->w * SDL_BYTESPERPIXEL(texture->format);
+            data->pixels = SDL_calloc(1, texture->h * data->pitch);
+            if (!data->pixels) {
+                SDL_OutOfMemory();
+                SDL_free(data);
+                return -1;
+            }
+        }
     }
 
     texture->driverdata = data;
